;(function() {

/*
Сделайте функцию, которая считает и выводит
количество своих вызовов.
func(); //выведет 1
func(); //выведет 2
func(); //выведет 3
*/
  function calculeInit() {

    function createCounter() {
      var num = 0;
      return function() {
  		    num++;
  		  return num;
  	  };
    }
/*
переменная num является локальной внутри
функции createCounter, но при этом она доступна
в анонимной функции. Анонимную функцию запишем в
переменную counter. Получится, что у нас далее
есть функция counter, внутри которой доступна
переменная num из createCounter.
*/
    var counter = createCounter();
    console.log(counter());
    console.log(counter());
    console.log(counter());
  }
/*
преимуществом такого подхода является то,
что переменная num не видна снаружи
createCounter и ее никто не сможет случайно
затереть. Снаружи она не видна, но доступ
к ней есть - через функцию counter, но
только через нее. Это замыкание - это функция со
всеми доступными внешними переменными (типа
num в нашем случае). Эти переменные называются
лексическим окружением функции.
*/
  window.task7 = calculeInit;

}());
